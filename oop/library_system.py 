class Book:
    """Base class representing a book with title and author."""

    def __init__(self, title, author):
        """Initialize a book with title and author.

        Args:
            title (str): The title of the book
            author (str): The author of the book
        """
        self.title = title
        self.author = author

    def __str__(self):
        """String representation of the book."""
        return f"Book: {self.title} by {self.author}"


class EBook(Book):
    """Derived class representing an electronic book."""

    def __init__(self, title, author, file_size):
        """Initialize an EBook with title, author, and file size.

        Args:
            title (str): The title of the book
            author (str): The author of the book
            file_size (int): The file size in KB
        """
        super().__init__(title, author)
        self.file_size = file_size

    def __str__(self):
        """String representation of the EBook."""
        return f"EBook: {self.title} by {self.author}, File Size: {self.file_size}KB"


class PrintBook(Book):
    """Derived class representing a physical printed book."""

    def __init__(self, title, author, page_count):
        """Initialize a PrintBook with title, author, and page count.

        Args:
            title (str): The title of the book
            author (str): The author of the book
            page_count (int): The number of pages in the book
        """
        super().__init__(title, author)
        self.page_count = page_count

    def __str__(self):
        """String representation of the PrintBook."""
        return f"PrintBook: {self.title} by {self.author}, Page Count: {self.page_count}"


class Library:
    """Library class that manages a collection of books using composition."""

    def __init__(self):
        """Initialize an empty library."""
        self.books = []

    def add_book(self, book):
        """Add a book to the library collection.

        Args:
            book (Book): An instance of Book, EBook, or PrintBook
        """
        if isinstance(book, Book):
            self.books.append(book)
        else:
            raise TypeError("Only Book instances (or its subclasses) can be added to the library")

    def list_books(self):
        """Print details of each book in the library."""
        if not self.books:
            print("The library is empty.")
            return

        for book in self.books:
            print(book)

    def get_book_count(self):
        """Return the total number of books in the library."""
        return len(self.books)

    def get_books_by_author(self, author):
        """Return a list of books by a specific author.

        Args:
            author (str): The author name to search for

        Returns:
            list: List of books by the specified author
        """
        return [book for book in self.books if book.author.lower() == author.lower()]